Learning the Fundamentals of Programming with C# - Anotações

Capitulo 1

Definindo uma classe:

- A definição mais simples de uma classe consiste da palavra-chave Class, seguido de seu nome. Por exemplo, Class HelloCSharp. O conteudo de uma classe está localizado em um bloco de linhas de programa, cercado por Chaves {}.

Definindo o metodo Main():

- O metodo Main() é o ponto inicial do nosso programa. Cada programa escrito em C# começa com um método Main() com o seguinte titulo (assinatura):

static void Main (string[]) args)

O metodo Main deve:
	1. Ser declarado como mostrado acima.
	2. Ser static e void.
	3. Deve ter apenas um parâmetro do tipo array de string. No nosso exemplo o parâmetro é chamado de args, mas não é obrigatório.

	Ele pode ser simplicado e parecer assim:

	static void Main()

	No metodo Main() podemos escrever uma sequencia aleatória de expressões e elas vão ser executadas na ordem designada á elas.

C# distingue entre minisculas e maiusculas!

Main Formatting Rules
	If we want our code to be correctly formatted, we must follow several
	important rules regarding indentation:
	- Methods are indented inside the definition of the class (move to the
	right by one or more [Tab] characters);
	- Method contents are indented inside the definition of the method;
	- The opening curly bracket { must be on its own line and placed exactly
	under the method or class it refers to;
	- The closing curly bracket } must be on its own line, placed exactly
	vertically under the respective opening bracket (with the same
	indentation);
	- All class names must start with a capital letter;
	- Variable names must begin with a lower-case letter;
	- Method names must start with a capital letter;
	Code indentation follows a very simple rule: when some piece of code is
	logically inside another piece of code, it is indented (moved) on the right with
	a single [Tab]. For example if a method is defined inside a class, it is indented
	(moved to the right). In the same way if a method body is inside a method, it
	is indented. To simplify this, we can assume that when we have the character
	“{“, all the code after it until its closing “}” should be indented on the right

Nomes de Arquivo = Nomes de Classe.


Palavras-Chave:

	abstract
	as
	base
	bool
	break
	byte
	case
	catch
	char
	checked
	class
	const
	continue
	decimal
	default
	delegate
	do
	double
	else
	enum
	event
	explicit
	extern
	false
	finally
	fixed
	float
	for
	foreach
	goto
	if
	implicit
	in
	int
	interface
	internal
	is
	lock
	long
	namespace
	new
	null
	object
	operator
	override
	params
	private
	protected
	public
	readonly
	ref
	return	
	sbyte
	sealed
	short
	this
	stackalloc
	static
	string
	struct
	switch
	this
	throw
	true
	try
	typeof
	uint
	ulong
	unchecked
	unsafe
	ushort
	using
	virtual
	void
	vollatile
	while

Os elementos de programa principais em C#, que são definidos e usados com ajuda de palavras-chaves, são:

	1. Classes
	2. Metodos
	3. Operadores
	4. Expressões
	5. Operadores Condicionais
	6. Laços
	7. Tipos de Dados
	8. Exceções
	e alguns outros.

Usando breakpoints:

	- Quando estamos numa linha e ela está colorada em amarelo, o código nessa linha não foi executado ainda. Ele executa depois de passarmos dessa linha. Aperte F10 pra prosseguir de linha.

Exercicios:	


1. Install and make yourself familiar with Microsoft Visual Studio and Microsoft Developer Network (MSDN) Library Documentation.
	R: Já instalei.

2. Find the description of the System.Console class in the standard .NET API documentation (MSDN Library).
	https://docs.microsoft.com/en-us/dotnet/api/system.console?redirectedfrom=MSDN&view=netframework-4.7.2

	Representa a entrada, saida e fluxos de erro para aplicações de console. Essa classe não pode ser herdada.

3. Find the description of the System.Console.WriteLine() method and its different possible parameters in the MSDN Library.
	https://docs.microsoft.com/en-us/dotnet/api/system.console.writeline?view=netframework-4.7.2

	Escreve o dado especificado, seguido pela terminador da atual linha, no fluxo de saida padrão.

4. Compile and execute the sample program from this chapter using the command prompt (the console) and Visual Studio.
	Já feito:

5. Modify the sample program to print a different greeting, for example "Good Day!".
	namespace IntroToCSharp
		{
		    class HelloCSharp
		    {
		        static void Main(string[] args)
		        {            
		            System.Console.WriteLine("Bom dia, caralho!!!");
		        }
		    }
		}

		//mensagem original: "Hello C Sharp!

6. Write a console application that prints your first and last name on the console.
	namespace IntroToCSharp
	{
	    class HelloCSharp
	    {
	        static void Main(string[] args)
	        {            
	            System.Console.WriteLine("Filipe D'Oliveira");
	        }
	    }
	}

7. Write a program that prints the following numbers on the console 1, 101, 1001, each on a new line.
		namespace IntroToCSharp
		{
		    class HelloCSharp
		    {
		        static void Main(string[] args)
		        {            
		            System.Console.WriteLine("1");
		            System.Console.WriteLine("101");
		            System.Console.WriteLine("1001");
		        }
		    }
		}

8. Write a program that prints on the console the current date and time.
	https://docs.microsoft.com/pt-br/dotnet/api/system.datetime?view=netframework-4.7.2



9. Write a program that prints the square root of 12345.
	Fiz, ver projeto RaizQuadrada.
10. Write a program that prints the first 100 members of the sequence 2, -3, 4, -5, 6, -7, 8.
	

	Inicial: 2
	-3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, 29, -30, 31, -32, 33, -34, 35, -36, 37, -38, 39, -40, 41, -42, 43, -44, 45, -46, 47, -48, 49, -50, -51, 52, -53, 54, -55, 56, -57, 58, -59, 60, -61, 62, -63, 64, -65, 66, -67, 68, -69, 70, -71, 72, -73, 74, -75, 76, -77, 78, -79, 80, -81, 82, -83, 84, -85, 86, -87, 88, -89, 90, -91, 92, -93, 94, -95, 96, -97, 98, -99, 100, -101, 102

	i = 2; i < 102
	j = i - (i x 2 + 1)
	i = i (i - j)

	i = 2
	2 - 5 = -3
	i = -3
	-3 + 7 = 4
	i = 4
	4 - 9 = -5
	i = -5

	ex: i = 2
	i = i - j
	j = i x 2 + 1
	i = 2 - j
	i = 2 - (2 x 2 + 1)
	i = 2 - (4 + 1)
	i = 2 - 5
	i = -3
	i = -3 - (-3 x 2 + 1)



11. Write a program that reads your age from the console and prints your age after 10 years.


12. Describe the difference between C# and the .NET Framework.
	C# is the programming language, created for .NET Framework, while .NET is the API.

13. Make a list of the most popular programming languages. How are they different from C#?
	Java: Similar to C#, shares its OOP paradigm.
	PHP: OOP, often used for bad code.

14. Decompile the example program from exercise 5.
	Descompilei usando ILSPY


Solutions



Capitulo 2: Tipos Primitivos e Variaveis
Fala sobre:
	- Tipos de dados
	- Variaveis
	- Tipos de valor
	- Tipos de referência
	- Literais

	O que é uma variável: 
		Valores em um programa que mudam durante sua execução.

	Tipos de Dados:
		Tipos de Dados (Data Types) são conjuntos (gamas) de valores que tem caracteristicas similares. 
			Por exemplo, tipo byte especifica um conjunto de integrais na gama de [0... 255]

			Caracteristicas:

			Tipos de dados são caracterizados por:
				- Nome - por exemplo, int.
				- Tamanho (how much memory they use) - por exemplo, 4 bytes.
				- Valor padrão - por exemplo, 0.


			Tipos:
				Tipos básicos de dados em C# são dividos nos seguintes tipos:
				- Tipos integral - sbyte, byte, short, ushort, int, uint, long, ulong;
				- Tipo de virgula ou ponto flutuante - float, double.
				- Tipo real com precisão decimal - decimal.
				- Tipo Booleano - bool;
				- Tipo de caractere - char;
				- String - string.
				- Tipo de objeto - object.

			Esses tipos de dados são chamados de primitivos (tipos embutidos ou incorporados, ou built-in), porque eles estão incorporados no nivel mais baixo da linguagem C#. Abaixo temos uma representação dos tipos de dado mencionados acima, seu alcance e valores padrões:
				Tipo de Dados  Valor Padrão    Valor Minimo  				Valor Máximo
				sbyte             	0          	  -128      					 127												
				byte               	0             	 0           				255								
				short				0             -32768         				32767		
				ushort              0               0            				65535			
				int                 0          -2147483648   				2147483647
				uint                0u				0	    			 	4294967295
				long                0L		-9223372036854775808		  9223372036854775807
				ulong               0u              0                    18446744073709551615
				float              0.0f        ±1.5×10-45                     ±3.4×1038
                double             0.0d        ±5.0×10-324                    ±1.7×10308
                decimal            0.0m        ±1.0×10-28                     ±7.9×1028
                bool               false    Dois valores possiveis: true and false (verdadeiro ou falso)
                char             '\u0000'       '\u0000'                      '\uffff'
                object             null (nulo)      -                             -
                string             null (nulo)      -                             -		



    Correspondência entre tipos C# e .NET:
    	Tipos de dados primitivos em C# tem uma correspondência direta com os tipos do Common Type System(CTS) no .NET Framework. Por exemplo, tipo int em C# corresponde ao tipo System.Int32 no CTS e ao Tipo Integral na linguagem VB.NET, enquanto o tipo Long em C# corresponde ao tipo System.Int64 em CTS e ao tipo Long na linguagem VB.NET. Devido aos Sistemas de Tipo Comum/Common Type System(CTS) no .NET Framework há compatibilidade entre linguagens de programação diferentes (por exemplo, C#, managed C++, VB.NET e F#). Pela mesma razão os tipos int, int32 e System.Int32 em C# são na verdade aliases diferentes para um único e mesmo tipo de data - signed 32-bit integer (ou integral de 32 bits com sinal. Ou seja, pode ter sinal de mais ou menos)


    	Tipos de Integral:
    		Tipos de Integral representam números integrais e são sbyte, byte, short, ushort, int, uint, long e ulong. Vamos examinar cada um deles:

    			O tipo sbyte é um integral de 8-bits com sinal. Isso quer dizer que o número de valores possiveis para ele é 2 elevado á 8, por exemplo, 256 valores no total, e eles podem ser ambos positivos ou negativos. O valor minimo que pode ser guardado no sbyte é Sbyte.MinValue = -128 (-2 elevado por 7) e o valor máximo é Sbyte.MaxValue = 127 (2 elevado à 7 - 1). O valor padrão é o numero 0.

    			O tipo byte é um integral de 8-bits sem sinal. Ele também tem 256 valores de integrais diferentes (2 elevado por 8) que só podem ser não-negativos. Seu valor padrão é o numero 0. O valor minimo tomado é Byte.MinValue = 0, e o valor máximo é Byte.MaxValue = 255(2 elevado à 8 - 1)

    			O tipo short é um integral de 16-bits com sinal. Seu valor minimo é INt16.MinValue = -32768 (-2 elevado á 15), e o máximo é Int16.MaxValue = 32767 (2 elevado á 15 - 1). O valor padrão para o tipo short é 0.

    			O tipo ushort é um integral de 16-bits sem sinal. O valor minimo que ele pode guardar é UInt16.MinValue = 0, e o valor máximo é - UInt16.MaxValue = 65535 ( 2 elevado a 16 - 1). Seu valor padrão é o numero 0.

    			O tipo int é um integral de 32-bits com sinal. Como podemos perceber, o crescimento do numero de bits aumenta o numero de valores possiveis que o tipo pode guardar.	            

